// Mocks generated by Mockito 5.4.6 from annotations
// in icp_autorun/test/enhanced_script_creation_screen_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;
import 'dart:ui' as _i5;

import 'package:icp_autorun/controllers/script_controller.dart' as _i3;
import 'package:icp_autorun/models/script_record.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i6;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class
// ignore_for_file: invalid_use_of_internal_member

class _FakeScriptRecord_0 extends _i1.SmartFake implements _i2.ScriptRecord {
  _FakeScriptRecord_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeDateTime_1 extends _i1.SmartFake implements DateTime {
  _FakeDateTime_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [ScriptController].
///
/// See the documentation for Mockito's code generation for more information.
class MockScriptController extends _i1.Mock implements _i3.ScriptController {
  MockScriptController() {
    _i1.throwOnMissingStub(this);
  }

  @override
  List<_i2.ScriptRecord> get scripts => (super.noSuchMethod(
        Invocation.getter(#scripts),
        returnValue: <_i2.ScriptRecord>[],
      ) as List<_i2.ScriptRecord>);

  @override
  bool get isBusy => (super.noSuchMethod(
        Invocation.getter(#isBusy),
        returnValue: false,
      ) as bool);

  @override
  bool get hasListeners => (super.noSuchMethod(
        Invocation.getter(#hasListeners),
        returnValue: false,
      ) as bool);

  @override
  _i4.Future<void> ensureLoaded() => (super.noSuchMethod(
        Invocation.method(
          #ensureLoaded,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> refresh() => (super.noSuchMethod(
        Invocation.method(
          #refresh,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<_i2.ScriptRecord> createScript({
    required String? title,
    String? emoji,
    String? imageUrl,
    String? luaSourceOverride,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #createScript,
          [],
          {
            #title: title,
            #emoji: emoji,
            #imageUrl: imageUrl,
            #luaSourceOverride: luaSourceOverride,
          },
        ),
        returnValue: _i4.Future<_i2.ScriptRecord>.value(_FakeScriptRecord_0(
          this,
          Invocation.method(
            #createScript,
            [],
            {
              #title: title,
              #emoji: emoji,
              #imageUrl: imageUrl,
              #luaSourceOverride: luaSourceOverride,
            },
          ),
        )),
      ) as _i4.Future<_i2.ScriptRecord>);

  @override
  _i4.Future<void> deleteScript(String? id) => (super.noSuchMethod(
        Invocation.method(
          #deleteScript,
          [id],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> updateSource({
    required String? id,
    required String? luaSource,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateSource,
          [],
          {
            #id: id,
            #luaSource: luaSource,
          },
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> updateDetails({
    required String? id,
    required String? title,
    String? emoji,
    String? imageUrl,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateDetails,
          [],
          {
            #id: id,
            #title: title,
            #emoji: emoji,
            #imageUrl: imageUrl,
          },
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  void addListener(_i5.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #addListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void removeListener(_i5.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #removeListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void notifyListeners() => super.noSuchMethod(
        Invocation.method(
          #notifyListeners,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [ScriptRecord].
///
/// See the documentation for Mockito's code generation for more information.
class MockScriptRecord extends _i1.Mock implements _i2.ScriptRecord {
  MockScriptRecord() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get id => (super.noSuchMethod(
        Invocation.getter(#id),
        returnValue: _i6.dummyValue<String>(
          this,
          Invocation.getter(#id),
        ),
      ) as String);

  @override
  String get title => (super.noSuchMethod(
        Invocation.getter(#title),
        returnValue: _i6.dummyValue<String>(
          this,
          Invocation.getter(#title),
        ),
      ) as String);

  @override
  String get luaSource => (super.noSuchMethod(
        Invocation.getter(#luaSource),
        returnValue: _i6.dummyValue<String>(
          this,
          Invocation.getter(#luaSource),
        ),
      ) as String);

  @override
  DateTime get createdAt => (super.noSuchMethod(
        Invocation.getter(#createdAt),
        returnValue: _FakeDateTime_1(
          this,
          Invocation.getter(#createdAt),
        ),
      ) as DateTime);

  @override
  DateTime get updatedAt => (super.noSuchMethod(
        Invocation.getter(#updatedAt),
        returnValue: _FakeDateTime_1(
          this,
          Invocation.getter(#updatedAt),
        ),
      ) as DateTime);

  @override
  Map<String, dynamic> toJson() => (super.noSuchMethod(
        Invocation.method(
          #toJson,
          [],
        ),
        returnValue: <String, dynamic>{},
      ) as Map<String, dynamic>);

  @override
  _i2.ScriptRecord copyWith({
    String? title,
    String? emoji,
    String? imageUrl,
    String? luaSource,
    DateTime? updatedAt,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #copyWith,
          [],
          {
            #title: title,
            #emoji: emoji,
            #imageUrl: imageUrl,
            #luaSource: luaSource,
            #updatedAt: updatedAt,
          },
        ),
        returnValue: _FakeScriptRecord_0(
          this,
          Invocation.method(
            #copyWith,
            [],
            {
              #title: title,
              #emoji: emoji,
              #imageUrl: imageUrl,
              #luaSource: luaSource,
              #updatedAt: updatedAt,
            },
          ),
        ),
      ) as _i2.ScriptRecord);
}
