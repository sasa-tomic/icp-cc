import type { Plugin } from "@opencode-ai/plugin"
import { writeFileSync, truncateSync } from "fs"
import { join } from "path"

export const AutoExitPlugin: Plugin = async ({ project, client, $, directory, worktree }) => {
  let hasPrompt = false
  let lastActivityTime = Date.now()
  let taskCompleted = false
  let timeoutId: NodeJS.Timeout | null = null
  const messageHistory: string[] = []
  const MAX_HISTORY = 10
  const LOOP_THRESHOLD = 5
  
  // Check if prompt was provided via CLI at startup
  const promptIndex = process.argv.findIndex(arg => arg === '-p' || arg === '--prompt')
  hasPrompt = promptIndex !== -1 && promptIndex + 1 < process.argv.length
  
  // Helper function to normalize message content for comparison
  const normalizeMessage = (content: any): string => {
    if (typeof content !== 'string') return ''
    return content.trim().toLowerCase().replace(/\s+/g, ' ')
  }
  
  // Check for infinite loop
  const checkForLoop = (): boolean => {
    if (messageHistory.length < LOOP_THRESHOLD) return false
    
    // Get the last LOOP_THRESHOLD messages
    const recentMessages = messageHistory.slice(-LOOP_THRESHOLD)
    const firstMessage = recentMessages[0]
    
    // Check if all recent messages are identical
    return recentMessages.every(msg => msg === firstMessage)
  }
  
  const summaryFilePath = join(directory || worktree || process.cwd(), "AGENT-RUN-SUMMARY.md")
  
  const createSummaryFile = (success: boolean, error?: string) => {
    try {
      if (success) {
        const summary = `# Agent Run Summary

**Status:** âœ… Completed Successfully
**Completed At:** ${new Date().toISOString()}
**Working Directory:** ${directory || worktree || process.cwd()}

## Progress Summary
Task was completed successfully and the agent exited normally.

---
*Generated by opencode auto-exit plugin*
`
        writeFileSync(summaryFilePath, summary)
        console.log(`Auto-exit: Summary created at ${summaryFilePath}`)
      } else {
        // Truncate file on error
        truncateSync(summaryFilePath, 0)
        console.log(`Auto-exit: Summary file truncated due to error`)
      }
    } catch (err) {
      console.error(`Auto-exit: Failed to handle summary file: ${err}`)
    }
  }
  
  const resetTimeout = () => {
    if (timeoutId) {
      clearTimeout(timeoutId)
    }
    
    if (hasPrompt) {
      timeoutId = setTimeout(() => {
        console.log("Auto-exit: Agent unresponsive for 30s, exiting with error...")
        createSummaryFile(false, "Agent unresponsive")
        process.exit(1)
      }, 30000) // 30 seconds
    }
  }
  
  return {
    event: async ({ event }) => {
      if (event.type === "session.start" && hasPrompt) {
        console.log("Auto-exit: Prompt provided via CLI, will exit after processing")
        resetTimeout()
      }
      
      // Track AI messages and command results for loop detection
      if (event.type === "message.created" || event.type === "tool.completed") {
        const content = event.content || event.result || ''
        const normalized = normalizeMessage(content)
        
        if (normalized) {
          messageHistory.push(normalized)
          
          // Keep only the last MAX_HISTORY messages
          if (messageHistory.length > MAX_HISTORY) {
            messageHistory.shift()
          }
          
          // Check for infinite loop
          if (checkForLoop()) {
            console.error("Auto-exit: Infinite loop detected! 5+ identical messages found.")
            console.error("Recent messages:", messageHistory.slice(-LOOP_THRESHOLD))
            createSummaryFile(false, "Infinite loop detected")
            process.exit(1)
          }
        }
      }
      
      // Reset timeout on any activity
      if (hasPrompt && [
        "message.created",
        "message.updated", 
        "tool.started",
        "tool.completed",
        "agent.thinking"
      ].includes(event.type)) {
        lastActivityTime = Date.now()
        resetTimeout()
      }
      
      // Mark task as completed when we get a completion signal
      if (event.type === "session.idle" && hasPrompt) {
        taskCompleted = true
        console.log("Auto-exit: Prompt processing complete, creating summary...")
        createSummaryFile(true)
        
        if (timeoutId) {
          clearTimeout(timeoutId)
        }
        
        process.exit(0)
      }
    },
  }
}